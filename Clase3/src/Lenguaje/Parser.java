
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Lenguaje;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import Clases.Utilidades.*;
import Clases.Abstractas.Expresion;
import Clases.Abstractas.Instruccion;
import Clases.Expresion.*;
import Clases.Instruccion.*;
import Clases.Objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Terminal.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\006\007\000\002\007\004\000" +
    "\002\010\005\000\002\011\007\000\002\012\010\000\002" +
    "\012\006\000\002\012\004\000\002\015\007\000\002\016" +
    "\005\000\002\017\012\000\002\020\005\000\002\021\007" +
    "\000\002\022\011\000\002\023\005\000\002\024\005\000" +
    "\002\025\005\000\002\026\005\000\002\027\006\000\002" +
    "\030\014\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\034\010\000" +
    "\002\034\006\000\002\034\010\000\002\034\010\000\002" +
    "\035\005\000\002\036\005\000\002\036\003\000\002\037" +
    "\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\004\013\021\014\032\005\001\002\000" +
    "\012\002\ufffe\004\ufffe\021\ufffe\032\ufffe\001\002\000\004" +
    "\053\212\001\002\000\004\002\211\001\002\000\012\002" +
    "\ufffd\004\ufffd\021\ufffd\032\ufffd\001\002\000\012\002\ufffc" +
    "\004\ufffc\021\ufffc\032\ufffc\001\002\000\012\002\000\004" +
    "\013\021\014\032\005\001\002\000\012\002\ufffb\004\ufffb" +
    "\021\ufffb\032\ufffb\001\002\000\004\037\162\001\002\000" +
    "\004\037\015\001\002\000\004\053\016\001\002\000\004" +
    "\022\017\001\002\000\004\023\153\001\002\000\004\054" +
    "\152\001\002\000\004\024\023\001\002\000\004\025\121" +
    "\001\002\000\004\061\024\001\002\000\042\006\034\007" +
    "\032\014\031\015\040\016\041\020\037\036\042\040\046" +
    "\041\052\052\043\055\045\063\047\064\027\065\044\066" +
    "\035\067\030\001\002\000\034\012\uffe7\025\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\054" +
    "\uffe7\056\uffe7\060\uffe7\062\uffe7\001\002\000\034\012\uffe5" +
    "\025\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\054\uffe5\056\uffe5\060\uffe5\062\uffe5\001\002" +
    "\000\034\012\uffdd\025\uffdd\042\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\054\uffdd\056\uffdd\060\uffdd" +
    "\062\uffdd\001\002\000\034\012\uffe0\025\uffe0\042\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0" +
    "\056\uffe0\060\uffe0\062\uffe0\001\002\000\004\057\114\001" +
    "\002\000\036\010\uffca\012\uffca\025\uffca\042\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\054\uffca\056" +
    "\uffca\060\uffca\062\uffca\001\002\000\034\012\uffe6\025\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\054\uffe6\056\uffe6\060\uffe6\062\uffe6\001\002\000\036" +
    "\010\uffcb\012\uffcb\025\uffcb\042\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\054\uffcb\056\uffcb\060\uffcb" +
    "\062\uffcb\001\002\000\034\012\uffe1\025\uffe1\042\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\054\uffe1" +
    "\056\uffe1\060\uffe1\062\uffe1\001\002\000\034\012\uffe4\025" +
    "\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\054\uffe4\056\uffe4\060\uffe4\062\uffe4\001\002\000" +
    "\034\012\uffdf\025\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\054\uffdf\056\uffdf\060\uffdf\062" +
    "\uffdf\001\002\000\004\057\111\001\002\000\004\057\104" +
    "\001\002\000\004\057\077\001\002\000\042\006\034\007" +
    "\032\014\031\015\040\016\041\020\037\036\042\040\046" +
    "\041\052\052\043\055\045\063\047\064\027\065\044\066" +
    "\035\067\030\001\002\000\034\012\uffe2\025\uffe2\042\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\054" +
    "\uffe2\056\uffe2\060\uffe2\062\uffe2\001\002\000\042\006\034" +
    "\007\032\014\031\015\040\016\041\020\037\036\042\040" +
    "\046\041\052\052\043\055\045\063\047\064\027\065\044" +
    "\066\035\067\030\001\002\000\034\012\uffdc\025\uffdc\042" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\054\uffdc\056\uffdc\060\uffdc\062\uffdc\001\002\000\034\012" +
    "\uffde\025\uffde\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\054\uffde\056\uffde\060\uffde\062\uffde\001" +
    "\002\000\034\012\uffe3\025\uffe3\042\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\054\uffe3\056\uffe3\060" +
    "\uffe3\062\uffe3\001\002\000\022\025\ufff0\042\054\044\061" +
    "\045\060\046\056\047\055\050\057\051\053\001\002\000" +
    "\034\012\uffdb\025\uffdb\042\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\054\uffdb\056\uffdb\060\uffdb\062" +
    "\uffdb\001\002\000\042\006\034\007\032\014\031\015\040" +
    "\016\041\020\037\036\042\040\046\041\052\052\043\055" +
    "\045\063\047\064\027\065\044\066\035\067\030\001\002" +
    "\000\042\006\034\007\032\014\031\015\040\016\041\020" +
    "\037\036\042\040\046\041\052\052\043\055\045\063\047" +
    "\064\027\065\044\066\035\067\030\001\002\000\042\006" +
    "\034\007\032\014\031\015\040\016\041\020\037\036\042" +
    "\040\046\041\052\052\043\055\045\063\047\064\027\065" +
    "\044\066\035\067\030\001\002\000\042\006\034\007\032" +
    "\014\031\015\040\016\041\020\037\036\042\040\046\041" +
    "\052\052\043\055\045\063\047\064\027\065\044\066\035" +
    "\067\030\001\002\000\042\006\034\007\032\014\031\015" +
    "\040\016\041\020\037\036\042\040\046\041\052\052\043" +
    "\055\045\063\047\064\027\065\044\066\035\067\030\001" +
    "\002\000\042\006\034\007\032\014\031\015\040\016\041" +
    "\020\037\036\042\040\046\041\052\052\043\055\045\063" +
    "\047\064\027\065\044\066\035\067\030\001\002\000\042" +
    "\006\034\007\032\014\031\015\040\016\041\020\037\036" +
    "\042\040\046\041\052\052\043\055\045\063\047\064\027" +
    "\065\044\066\035\067\030\001\002\000\034\012\uffd7\025" +
    "\uffd7\042\uffd7\044\uffd7\045\060\046\056\047\055\050\057" +
    "\051\053\054\uffd7\056\uffd7\060\uffd7\062\uffd7\001\002\000" +
    "\034\012\uffd6\025\uffd6\042\uffd6\044\uffd6\045\uffd6\046\056" +
    "\047\055\050\057\051\053\054\uffd6\056\uffd6\060\uffd6\062" +
    "\uffd6\001\002\000\034\012\uffd4\025\uffd4\042\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\056" +
    "\uffd4\060\uffd4\062\uffd4\001\002\000\034\012\uffd8\025\uffd8" +
    "\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\057\051" +
    "\053\054\uffd8\056\uffd8\060\uffd8\062\uffd8\001\002\000\034" +
    "\012\uffd9\025\uffd9\042\uffd9\044\uffd9\045\uffd9\046\056\047" +
    "\uffd9\050\057\051\053\054\uffd9\056\uffd9\060\uffd9\062\uffd9" +
    "\001\002\000\034\012\uffda\025\uffda\042\uffda\044\061\045" +
    "\060\046\056\047\055\050\057\051\053\054\uffda\056\uffda" +
    "\060\uffda\062\uffda\001\002\000\034\012\uffd5\025\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\057\051\uffd5" +
    "\054\uffd5\056\uffd5\060\uffd5\062\uffd5\001\002\000\006\056" +
    "\074\062\073\001\002\000\024\042\054\044\061\045\060" +
    "\046\056\047\055\050\057\051\053\056\uffcc\062\uffcc\001" +
    "\002\000\042\006\034\007\032\014\031\015\040\016\041" +
    "\020\037\036\042\040\046\041\052\052\043\055\045\063" +
    "\047\064\027\065\044\066\035\067\030\001\002\000\034" +
    "\012\uffce\025\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\054\uffce\056\uffce\060\uffce\062\uffce" +
    "\001\002\000\024\042\054\044\061\045\060\046\056\047" +
    "\055\050\057\051\053\056\uffcd\062\uffcd\001\002\000\034" +
    "\012\uffd3\025\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\054\uffd3\056\uffd3\060\uffd3\062\uffd3" +
    "\001\002\000\042\006\034\007\032\014\031\015\040\016" +
    "\041\020\037\036\042\040\046\041\052\052\043\055\045" +
    "\063\047\064\027\065\044\066\035\067\030\001\002\000" +
    "\022\042\054\044\061\045\060\046\056\047\055\050\057" +
    "\051\053\062\101\001\002\000\042\006\034\007\032\014" +
    "\031\015\040\016\041\020\037\036\042\040\046\041\052" +
    "\052\043\055\045\063\047\064\027\065\044\066\035\067" +
    "\030\001\002\000\022\042\054\044\061\045\060\046\056" +
    "\047\055\050\057\051\053\060\103\001\002\000\034\012" +
    "\uffcf\025\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\054\uffcf\056\uffcf\060\uffcf\062\uffcf\001" +
    "\002\000\042\006\034\007\032\014\031\015\040\016\041" +
    "\020\037\036\042\040\046\041\052\052\043\055\045\063" +
    "\047\064\027\065\044\066\035\067\030\001\002\000\022" +
    "\042\054\044\061\045\060\046\056\047\055\050\057\051" +
    "\053\062\106\001\002\000\042\006\034\007\032\014\031" +
    "\015\040\016\041\020\037\036\042\040\046\041\052\052" +
    "\043\055\045\063\047\064\027\065\044\066\035\067\030" +
    "\001\002\000\022\042\054\044\061\045\060\046\056\047" +
    "\055\050\057\051\053\060\110\001\002\000\034\012\uffd0" +
    "\025\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\054\uffd0\056\uffd0\060\uffd0\062\uffd0\001\002" +
    "\000\042\006\034\007\032\014\031\015\040\016\041\020" +
    "\037\036\042\040\046\041\052\052\043\055\045\063\047" +
    "\064\027\065\044\066\035\067\030\001\002\000\022\042" +
    "\054\044\061\045\060\046\056\047\055\050\057\051\053" +
    "\060\113\001\002\000\034\012\uffd1\025\uffd1\042\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1" +
    "\056\uffd1\060\uffd1\062\uffd1\001\002\000\042\006\034\007" +
    "\032\014\031\015\040\016\041\020\037\036\042\040\046" +
    "\041\052\052\043\055\045\063\047\064\027\065\044\066" +
    "\035\067\030\001\002\000\022\042\054\044\061\045\060" +
    "\046\056\047\055\050\057\051\053\062\116\001\002\000" +
    "\042\006\034\007\032\014\031\015\040\016\041\020\037" +
    "\036\042\040\046\041\052\052\043\055\045\063\047\064" +
    "\027\065\044\066\035\067\030\001\002\000\022\042\054" +
    "\044\061\045\060\046\056\047\055\050\057\051\053\060" +
    "\120\001\002\000\034\012\uffd2\025\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\056" +
    "\uffd2\060\uffd2\062\uffd2\001\002\000\004\061\123\001\002" +
    "\000\004\054\ufff2\001\002\000\004\053\124\001\002\000" +
    "\004\026\127\001\002\000\004\054\151\001\002\000\004" +
    "\062\132\001\002\000\004\061\130\001\002\000\042\006" +
    "\034\007\032\014\031\015\040\016\041\020\037\036\042" +
    "\040\046\041\052\052\043\055\045\063\047\064\027\065" +
    "\044\066\035\067\030\001\002\000\022\042\054\044\061" +
    "\045\060\046\056\047\055\050\057\051\053\062\uffed\001" +
    "\002\000\004\027\133\001\002\000\004\061\147\001\002" +
    "\000\004\062\135\001\002\000\004\030\136\001\002\000" +
    "\004\061\145\001\002\000\004\062\140\001\002\000\004" +
    "\031\141\001\002\000\004\061\143\001\002\000\004\054" +
    "\uffee\001\002\000\042\006\034\007\032\014\031\015\040" +
    "\016\041\020\037\036\042\040\046\041\052\052\043\055" +
    "\045\063\047\064\027\065\044\066\035\067\030\001\002" +
    "\000\022\042\054\044\061\045\060\046\056\047\055\050" +
    "\057\051\053\054\uffea\001\002\000\042\006\034\007\032" +
    "\014\031\015\040\016\041\020\037\036\042\040\046\041" +
    "\052\052\043\055\045\063\047\064\027\065\044\066\035" +
    "\067\030\001\002\000\022\042\054\044\061\045\060\046" +
    "\056\047\055\050\057\051\053\062\uffeb\001\002\000\042" +
    "\006\034\007\032\014\031\015\040\016\041\020\037\036" +
    "\042\040\046\041\052\052\043\055\045\063\047\064\027" +
    "\065\044\066\035\067\030\001\002\000\022\042\054\044" +
    "\061\045\060\046\056\047\055\050\057\051\053\062\uffec" +
    "\001\002\000\004\054\uffef\001\002\000\012\002\ufff3\004" +
    "\ufff3\021\ufff3\032\ufff3\001\002\000\004\061\154\001\002" +
    "\000\004\055\155\001\002\000\004\037\156\001\002\000" +
    "\004\062\157\001\002\000\004\037\160\001\002\000\004" +
    "\056\161\001\002\000\004\024\ufff1\001\002\000\004\053" +
    "\163\001\002\000\004\005\166\001\002\000\004\010\173" +
    "\001\002\000\004\054\171\001\002\000\004\061\167\001" +
    "\002\000\006\006\034\007\032\001\002\000\004\010\ufff8" +
    "\001\002\000\012\002\ufffa\004\ufffa\021\ufffa\032\ufffa\001" +
    "\002\000\004\054\ufff9\001\002\000\004\061\174\001\002" +
    "\000\004\055\175\001\002\000\006\011\177\013\176\001" +
    "\002\000\042\006\034\007\032\014\031\015\040\016\041" +
    "\020\037\036\042\040\046\041\052\052\043\055\045\063" +
    "\047\064\027\065\044\066\035\067\030\001\002\000\042" +
    "\006\034\007\032\014\031\015\040\016\041\020\037\036" +
    "\042\040\046\041\052\052\043\055\045\063\047\064\027" +
    "\065\044\066\035\067\030\001\002\000\004\056\201\001" +
    "\002\000\004\054\ufff7\001\002\000\022\012\203\042\054" +
    "\044\061\045\060\046\056\047\055\050\057\051\053\001" +
    "\002\000\042\006\034\007\032\014\031\015\040\016\041" +
    "\020\037\036\042\040\046\041\052\052\043\055\045\063" +
    "\047\064\027\065\044\066\035\067\030\001\002\000\024" +
    "\042\054\044\061\045\060\046\056\047\055\050\057\051" +
    "\053\056\ufff5\062\205\001\002\000\006\011\177\013\176" +
    "\001\002\000\004\056\ufff6\001\002\000\022\042\054\044" +
    "\061\045\060\046\056\047\055\050\057\051\053\056\ufff4" +
    "\001\002\000\012\002\uffff\004\uffff\021\uffff\032\uffff\001" +
    "\002\000\004\002\001\001\002\000\004\033\213\001\002" +
    "\000\004\055\216\001\002\000\004\054\215\001\002\000" +
    "\012\002\uffe9\004\uffe9\021\uffe9\032\uffe9\001\002\000\004" +
    "\037\217\001\002\000\004\056\220\001\002\000\004\034" +
    "\221\001\002\000\004\053\222\001\002\000\004\035\223" +
    "\001\002\000\004\061\224\001\002\000\042\006\034\007" +
    "\032\014\031\015\040\016\041\020\037\036\042\040\046" +
    "\041\052\052\043\055\045\063\047\064\027\065\044\066" +
    "\035\067\030\001\002\000\022\042\054\044\061\045\060" +
    "\046\056\047\055\050\057\051\053\054\226\001\002\000" +
    "\004\054\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\002\005\003\010\004\003\006\006\015" +
    "\007\027\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\207\006\006\015\007\027\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\017\017\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\021\001\001\000\004\021" +
    "\121\001\001\000\002\001\001\000\016\031\050\032\024" +
    "\033\032\034\035\035\047\037\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\075\032\024\033\032\034\035\035\047" +
    "\037\025\001\001\000\002\001\001\000\020\031\071\032" +
    "\024\033\032\034\035\035\047\036\070\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\067\032\024" +
    "\033\032\034\035\035\047\037\025\001\001\000\016\031" +
    "\066\032\024\033\032\034\035\035\047\037\025\001\001" +
    "\000\016\031\065\032\024\033\032\034\035\035\047\037" +
    "\025\001\001\000\016\031\064\032\024\033\032\034\035" +
    "\035\047\037\025\001\001\000\016\031\063\032\024\033" +
    "\032\034\035\035\047\037\025\001\001\000\016\031\062" +
    "\032\024\033\032\034\035\035\047\037\025\001\001\000" +
    "\016\031\061\032\024\033\032\034\035\035\047\037\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\074\032\024\033\032\034\035\035\047\037\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\077\032\024\033\032\034\035\035\047" +
    "\037\025\001\001\000\002\001\001\000\016\031\101\032" +
    "\024\033\032\034\035\035\047\037\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\104\032\024\033" +
    "\032\034\035\035\047\037\025\001\001\000\002\001\001" +
    "\000\016\031\106\032\024\033\032\034\035\035\047\037" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\031\111\032\024\033\032\034\035\035\047\037\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\114" +
    "\032\024\033\032\034\035\035\047\037\025\001\001\000" +
    "\002\001\001\000\016\031\116\032\024\033\032\034\035" +
    "\035\047\037\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\124\023\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\130\032\024" +
    "\033\032\034\035\035\047\037\025\001\001\000\002\001" +
    "\001\000\004\024\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\143\032\024\033\032\034" +
    "\035\035\047\037\025\001\001\000\002\001\001\000\016" +
    "\031\145\032\024\033\032\034\035\035\047\037\025\001" +
    "\001\000\002\001\001\000\016\031\147\032\024\033\032" +
    "\034\035\035\047\037\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\164\010\163\001\001\000\004\011\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\177" +
    "\001\001\000\016\031\206\032\024\033\032\034\035\035" +
    "\047\037\025\001\001\000\016\031\201\032\024\033\032" +
    "\034\035\035\047\037\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\031\203\032\024" +
    "\033\032\034\035\035\047\037\025\001\001\000\002\001" +
    "\001\000\004\012\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\224\032\024\033\032\034\035\035\047\037" +
    "\025\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Codigo Java
    public ArrayList<Instruccion> sentencias;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> inst = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sentencias = inst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> l = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(i));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= ESTRATEGIA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CrearEstrategia e = (CrearEstrategia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= PARTIDA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= PUNTO_ACCESO 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRATEGIA ::= RW_strategy TK_id TK_llaveA INSTRUCCIONES_ESTRATEGIA TK_llaveC 
            {
              CrearEstrategia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstruccionEstrategia inst = (InstruccionEstrategia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CrearEstrategia(n, inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRATEGIA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES_ESTRATEGIA ::= DECISION_INICIAL REGLAS 
            {
              InstruccionEstrategia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Regla> r = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstruccionEstrategia(i, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_ESTRATEGIA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECISION_INICIAL ::= RW_initial TK_dosPuntos DECISION 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECISION_INICIAL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REGLAS ::= RW_rules TK_dosPuntos TK_corcheteA LISTA_REGLAS TK_corcheteC 
            {
              ArrayList<Regla> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Regla> l = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_REGLAS ::= RW_if EXPRESION RW_then EXPRESION TK_coma LISTA_REGLAS 
            {
              ArrayList<Regla> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Regla> l = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.add(new Regla(c, a) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_REGLAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_REGLAS ::= RW_if EXPRESION RW_then EXPRESION 
            {
              ArrayList<Regla> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Regla>(Arrays.asList(new Regla(c, a))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_REGLAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_REGLAS ::= RW_else EXPRESION 
            {
              ArrayList<Regla> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Regla>(Arrays.asList(new Regla(null, a))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_REGLAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARTIDA ::= RW_match TK_id TK_llaveA INSTRUCIONES_PARTIDA TK_llaveC 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstruccionesPartida inst = (InstruccionesPartida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CrearPartida(n, inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARTIDA",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCIONES_PARTIDA ::= JUGADORES RONDAS PUNTUACIONES 
            {
              InstruccionesPartida RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Jugadores j = (Jugadores)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion r = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Puntos p = (Puntos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstruccionesPartida(j, r, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCIONES_PARTIDA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // JUGADORES ::= RW_players RW_strategies TK_dosPuntos TK_corcheteA TK_id TK_coma TK_id TK_corcheteC 
            {
              Jugadores RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String j1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String j2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Jugadores(j1, j2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RONDAS ::= RW_rounds TK_dosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RONDAS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PUNTUACIONES ::= RW_scoring TK_dosPuntos TK_llaveA PUNTOS TK_llaveC 
            {
              Puntos RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Puntos p = (Puntos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUNTUACIONES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PUNTOS ::= COOPERACION_MUTUA TK_coma DEFECCION_MUTUA TK_coma TRAIDOR TK_coma TRAICIONADO 
            {
              Puntos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion tr = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ta = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Puntos(c, d, tr, ta); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUNTOS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COOPERACION_MUTUA ::= RW_cooperacionM TK_dosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COOPERACION_MUTUA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFECCION_MUTUA ::= RW_defeccionnM TK_dosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFECCION_MUTUA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TRAIDOR ::= RW_traidor TK_dosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRAIDOR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TRAICIONADO ::= RW_traicionado TK_dosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRAICIONADO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PUNTO_ACCESO ::= RW_main TK_llaveA INSTRUCCIONES_ACCESO TK_llaveC 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PuntoAcceso(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUNTO_ACCESO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONES_ACCESO ::= RW_run TK_corcheteA TK_id TK_corcheteC RW_with TK_llaveA RW_seed TK_dosPuntos EXPRESION TK_llaveC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_ACCESO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= RELACIONALES 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= LOGICAS 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= DECISION 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= FUNCIONES 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= LISTA 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= RW_random 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= RW_opponent_history 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= RW_self_history 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= RW_round_number 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= RW_true 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(p, Tipo.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= RW_false 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(p, Tipo.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= TK_enteros 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(p, Tipo.ENTERO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= TK_decimales 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(p, Tipo.DECIMAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RELACIONALES ::= EXPRESION TK_igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RELACIONALES ::= EXPRESION TK_mayorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RELACIONALES ::= EXPRESION TK_menorIgual EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RELACIONALES ::= EXPRESION TK_mayor EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RELACIONALES ::= EXPRESION TK_menor EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LOGICAS ::= EXPRESION TK_and EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LOGICAS ::= EXPRESION TK_or EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LOGICAS ::= TK_not EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAS",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES ::= RW_get_move TK_parA EXPRESION TK_coma EXPRESION TK_parC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCIONES ::= RW_last_move TK_parA EXPRESION TK_parC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONES ::= RW_get_moves_count TK_parA EXPRESION TK_coma EXPRESION TK_parC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONES ::= RW_get_last_n_moves TK_parA EXPRESION TK_coma EXPRESION TK_parC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA ::= TK_corcheteA ELEMENTOS TK_corcheteC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTOS ::= ELEMENTOS TK_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECISION ::= RW_C 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(d, Tipo.DECISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECISION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECISION ::= RW_D 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitivo(d, Tipo.DECISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECISION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

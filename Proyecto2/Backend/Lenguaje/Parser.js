/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,12],$V2=[1,20],$V3=[1,21],$V4=[1,14],$V5=[1,15],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,16],$Va=[2,5,14,15,16,18,19,24,28,30,31,32,36],$Vb=[1,33],$Vc=[1,40],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,41],$Vk=[1,42],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66],$VB=[2,14,15,16,18,19,22,24,28,32,36,40,41],$VC=[2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,65,66],$VD=[2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,54,55,59,60,61,62,63,64,65,66],$VE=[2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,59,60,65,66],$VF=[2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,59,60,61,62,63,64,65,66],$VG=[40,41],$VH=[1,111];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"FUNCIONES_METODOS":9,"IMPRIMIR":10,"CONDICIONAL_SI":11,"CICLO_PARA":12,"RETORNO":13,"RW_continuar":14,"RW_regresar":15,"RW_retornar":16,"EXPRESION":17,"RW_ingresar":18,"TK_id":19,"RW_como":20,"TIPO":21,"RW_con":22,"RW_valor":23,"RW_imprimir":24,"TK_asign":25,"INCREMENTO":26,"TK_inc":27,"RW_si":28,"RW_entonces":29,"RW_deLoContrario":30,"RW_fin":31,"RW_para":32,"RW_hasta":33,"RW_incremento":34,"RW_hacer":35,"RW_funcion":36,"RW_parametros":37,"TK_parA":38,"PARAMETROS":39,"TK_parC":40,"TK_coma":41,"PARAMETRO":42,"LLAMAR_FUNCIONES_METODOS":43,"ARGUMENTOS":44,"ARITMETICOS":45,"RELACIONALES":46,"LOGICOS":47,"RW_verdadero":48,"RW_falso":49,"TK_string":50,"TK_char":51,"TK_double":52,"TK_integer":53,"TK_suma":54,"TK_resta":55,"TK_mult":56,"TK_div":57,"TK_mod":58,"TK_igual":59,"TK_dif":60,"TK_mayor":61,"TK_menor":62,"TK_mayorI":63,"TK_menorI":64,"TK_and":65,"TK_or":66,"TK_not":67,"RW_entero":68,"RW_decimal":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"RW_continuar",15:"RW_regresar",16:"RW_retornar",18:"RW_ingresar",19:"TK_id",20:"RW_como",22:"RW_con",23:"RW_valor",24:"RW_imprimir",25:"TK_asign",27:"TK_inc",28:"RW_si",29:"RW_entonces",30:"RW_deLoContrario",31:"RW_fin",32:"RW_para",33:"RW_hasta",34:"RW_incremento",35:"RW_hacer",36:"RW_funcion",37:"RW_parametros",38:"TK_parA",40:"TK_parC",41:"TK_coma",48:"RW_verdadero",49:"RW_falso",50:"TK_string",51:"TK_char",52:"TK_double",53:"TK_integer",54:"TK_suma",55:"TK_resta",56:"TK_mult",57:"TK_div",58:"TK_mod",59:"TK_igual",60:"TK_dif",61:"TK_mayor",62:"TK_menor",63:"TK_mayorI",64:"TK_menorI",65:"TK_and",66:"TK_or",67:"TK_not",68:"RW_entero",69:"RW_decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,1],[13,2],[7,7],[10,2],[8,3],[26,2],[11,8],[11,6],[12,13],[9,11],[9,6],[39,3],[39,1],[42,2],[43,4],[43,3],[44,3],[44,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[47,3],[47,3],[47,2],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3: case 25: case 30:
this.$.push($$[$0])
break;
case 4: case 26: case 31:
this.$ = [$$[$0]]  
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 32: case 33: case 34: case 35: case 36:
this.$ = $$[$0]
break;
case 12:
this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column)
break;
case 13:
errores.push(new Error(this._$.first_line, this._$.first_column + 1, TipoError.SINTACTICO, `No se esperaba «${yytext}»`))
break;
case 14:
this.$ = new Retornar(_$[$0].first_line, _$[$0].first_column, null);
break;
case 15:
this.$ = new Retornar(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);  
break;
case 16:
this.$ = new DeclaracionID(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0])
break;
case 17:
this.$ = new Imprimir(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 18:
this.$ = new Asignacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])
break;
case 19:
this.$ = new IncDec(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'inc')
break;
case 20:
this.$ = new Si(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2])
break;
case 21:
this.$ = new Si(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-2], undefined)
break;
case 22:
this.$ = new Para(_$[$0-12].first_line, _$[$0-12].first_column, $$[$0-11], $$[$0-9], $$[$0-7], $$[$0-2])
break;
case 23:
this.$ = new Funcion(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-8], $$[$0-4], $$[$0-2])
break;
case 24:
this.$ = new Funcion(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], [], $$[$0-2])
break;
case 27:
this.$ = new Parametro(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0])
break;
case 28:
this.$ = new LlamadaFUncion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])
break;
case 29:
this.$ = new LlamadaFUncion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], [])
break;
case 37:
this.$ = new AccesoID(_$[$0].first_line, _$[$0].first_column, $$[$0]                )
break;
case 38: case 39:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.BOOLEANO)
break;
case 40:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CADENA  )
break;
case 41:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CARACTER)
break;
case 42:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.DECIMAL )
break;
case 43:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.ENTERO  )
break;
case 44:
this.$ = $$[$0-1]
break;
case 45: case 46: case 47: case 48: case 49:
this.$ = new Aritmetico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 50:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 51: case 52: case 53: case 54: case 55: case 56:
this.$ = new Relacional(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 57: case 58:
this.$ = new Logico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])       
break;
case 59:
this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 60:
this.$ = Tipo.ENTERO 
break;
case 61:
this.$ = Tipo.DECIMAL
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},{1:[3]},{2:$V0,5:[1,22],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},{1:[2,2]},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),{19:[1,24]},{25:[1,25]},{19:[1,26]},{17:27,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:43,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{19:[1,44]},o($Va,[2,14]),{17:45,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{1:[2,1]},o($Va,[2,3]),{20:[1,46]},{17:47,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{21:48,68:$Vl,69:$Vm},o($Va,[2,17],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VA,[2,32]),o($VA,[2,33]),o($VA,[2,34]),o($VA,[2,35]),o($VA,[2,36]),o($VA,[2,37],{27:[1,64],38:[1,65]}),o($VA,[2,38]),o($VA,[2,39]),o($VA,[2,40]),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,43]),{17:66,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:67,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:68,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{29:[1,69],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz},{25:[1,70]},o($Va,[2,15],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),{21:71,68:$Vl,69:$Vm},o($Va,[2,18],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),{2:$V0,4:73,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,22:[1,72],24:$V6,28:$V7,32:$V8,36:$V9},o($VB,[2,60]),o($VB,[2,61]),{17:74,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:75,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:76,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:77,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:78,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:79,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:80,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:81,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:82,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:83,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:84,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:85,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:86,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},o($VA,[2,19]),{17:89,19:$Vb,26:31,38:$Vc,40:[1,88],43:32,44:87,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{40:[1,90],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz},o($VA,[2,50]),o($VC,[2,59],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),{2:$V0,4:91,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},{17:92,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{22:[1,93]},{37:[1,94]},{2:$V0,6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,31:[1,95],32:$V8,36:$V9},o($VD,[2,45],{56:$Vp,57:$Vq,58:$Vr}),o($VD,[2,46],{56:$Vp,57:$Vq,58:$Vr}),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),o($VE,[2,51],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),o($VE,[2,52],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),o($VF,[2,53],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr}),o($VF,[2,54],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr}),o($VF,[2,55],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr}),o($VF,[2,56],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr}),o($VC,[2,57],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),o([2,5,14,15,16,18,19,22,24,28,29,30,31,32,33,35,36,40,41,66],[2,58],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy}),{40:[1,96],41:[1,97]},o($VA,[2,29]),o($VG,[2,31],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VA,[2,44]),{2:$V0,6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,30:[1,98],31:[1,99],32:$V8,36:$V9},{33:[1,100],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz},{23:[1,101]},{38:[1,102]},{36:[1,103]},o($VA,[2,28]),{17:104,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{2:$V0,4:105,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},{28:[1,106]},{17:107,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{17:108,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{19:$VH,39:109,42:110},o($Va,[2,24]),o($VG,[2,30],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),{2:$V0,6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,31:[1,112],32:$V8,36:$V9},o($Va,[2,21]),{22:[1,113],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz},o($Va,[2,16],{54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),{40:[1,114],41:[1,115]},o($VG,[2,26]),{21:116,68:$Vl,69:$Vm},{28:[1,117]},{34:[1,118]},{2:$V0,4:119,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},{19:$VH,42:120},o($VG,[2,27]),o($Va,[2,20]),{17:121,19:$Vb,26:31,38:$Vc,43:32,45:28,46:29,47:30,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,55:$Vj,67:$Vk},{2:$V0,6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,31:[1,122],32:$V8,36:$V9},o($VG,[2,25]),{35:[1,123],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz},{36:[1,124]},{2:$V0,4:125,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,32:$V8,36:$V9},o($Va,[2,23]),{2:$V0,6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V1,15:$V2,16:$V3,18:$V4,19:$V5,24:$V6,28:$V7,31:[1,126],32:$V8,36:$V9},{32:[1,127]},o($Va,[2,22])],
defaultActions: {3:[2,2],22:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // JavaScript
    let { errores } = require ('../Clases/Utilidades/Salida')
    const { Error } = require ('../Clases/Utilidades/Error')
    const { TipoError } = require ('../Clases/Utilidades/TipoError')

    // Tipos
    const { Tipo } = require ('../Clases/Utilidades/Tipo')
    // Instrucciones
    const { DeclaracionID } = require ('../Clases/Instrucciones/DeclaracionID')
    const { Asignacion } = require ('../Clases/Instrucciones/Asignacion')
    const { Imprimir } = require ('../Clases/Instrucciones/Imprimir')
    const { Si } = require ('../Clases/Instrucciones/Si')
    const { Para } = require ('../Clases/Instrucciones/Para')
    const { Continuar } = require ('../Clases/Instrucciones/Continuar')
    const { Funcion } = require ('../Clases/Instrucciones/Funcion')
    // Expresiones
    const { Primitivo } = require ('../Clases/Expresiones/Primitivo')
    const { AccesoID } = require ('../Clases/Expresiones/AccesoID')
    const { IncDec } = require ('../Clases/Expresiones/IncDec')
    const { Aritmetico } = require ('../Clases/Expresiones/Aritmetico')
    const { Relacional } = require ('../Clases/Expresiones/Relacional')
    const { Logico } = require ('../Clases/Expresiones/Logico')
    const { Retornar } = require ('../Clases/Expresiones/Retornar')
    const { Parametro } = require ('../Clases/Expresiones/Parametro')
    const { LlamadaFUncion } = require ('../Clases/Expresiones/LlamadaFUncion')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4: return 18 
break;
case 5: return 20     
break;
case 6: return 22      
break;
case 7: return 23    
break;
case 8: return 24 
break;
case 9: return 48
break;
case 10: return 49    
break;
case 11: return 31      
break;
case 12: return 'RW_o'       
break;
case 13: return 28       
break;
case 14: return 30 
break;
case 15: return 32     
break;
case 16: return 33    
break;
case 17: return 34 
break;
case 18: return 35    
break;
case 19: return 29 
break;
case 20: return 16 
break;
case 21: return 15 
break;
case 22: return 14
break;
case 23: return 36  
break;
case 24: return 37 
break;
case 25: return 68   
break;
case 26: return 69  
break;
case 27: return 19       
break;
case 28: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 50   
break;
case 29: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 51     
break;
case 30: return 52   
break;
case 31: return 53  
break;
case 32: return 25    
break;
case 33: return 59    
break;
case 34: return 60      
break;
case 35: return 61    
break;
case 36: return 62    
break;
case 37: return 63   
break;
case 38: return 64   
break;
case 39: return 65      
break;
case 40: return 66       
break;
case 41: return 67      
break;
case 42: return 27     
break;
case 43: return 'TK_dec'     
break;
case 44: return 54     
break;
case 45: return 55    
break;
case 46: return 56     
break;
case 47: return 57      
break;
case 48: return 58      
break;
case 49: return 38     
break;
case 50: return 40     
break;
case 51: return 41     
break;
case 52: errores.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TipoError.LEXICO, `Caracter no reconocido «${yy_.yytext}»`)); 
break;
case 53: return 5         
break;
}
},
rules: [/^(?:\n)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:([\s\r\t]+))/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:imprimir\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:fin\b)/,/^(?:o\b)/,/^(?:si\b)/,/^(?:de lo contrario\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:incremento\b)/,/^(?:hacer\b)/,/^(?:entonces\b)/,/^(?:retornar\b)/,/^(?:regresar\b)/,/^(?:continuar\b)/,/^(?:funcion\b)/,/^(?:parametros\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:("((([^\n\"\\]|\\.))*)"))/,/^(?:('((([^\n\"\\]|\\.)))'))/,/^(?:([0-9]+\.[0-9]+\b))/,/^(?:([0-9]+\b))/,/^(?:->)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones*/
package Lenguaje;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Clases.Errores.ErrorLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Lenguaje/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7, 48, 48,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    32, 35,  0,  0,  0,  0, 39,  0, 44, 45,  9,  0, 47,  0,  3,  6, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 46,  0, 37, 34, 36,  0, 
     0,  5,  5, 20, 21,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 42,  0, 43,  0,  4, 
     0, 13, 30, 28, 29, 14, 23, 15, 24, 17,  5,  5, 19, 25, 18, 26, 
    31,  5, 12, 10, 11, 22, 27, 33,  5, 16,  5, 40, 38, 41,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\7\4\1\6\1\7\6\4\1\1\1\10\1\11\1\12"+
    "\2\1\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\0\1\2\1\0\13\4\1\23\10\4\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\0\7\4"+
    "\1\33\16\4\1\2\1\4\1\34\2\4\1\35\1\36"+
    "\3\4\1\37\5\4\1\40\4\4\1\41\4\4\1\42"+
    "\5\4\1\43\1\44\7\4\1\45\1\4\1\46\12\4"+
    "\1\47\3\4\1\50\1\4\1\0\2\4\1\51\1\52"+
    "\4\4\1\53\1\4\2\0\7\4\1\54\2\0\1\4"+
    "\1\0\1\55\4\4\2\0\1\4\2\0\4\4\2\0"+
    "\1\4\2\0\1\56\1\57\2\4\2\0\1\4\2\0"+
    "\2\4\2\0\1\4\2\0\2\4\2\0\1\4\2\0"+
    "\1\4\1\60\2\0\1\4\1\61\1\0\1\62\1\0"+
    "\1\63\1\64\3\0\1\65\1\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\61"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\365"+
    "\0\365\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\u04fa\0\304\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\365\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u04fa\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\365\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\61\0\u0d66\0\365\0\u0d97\0\u0dc8"+
    "\0\365\0\365\0\u0df9\0\u0e2a\0\u0e5b\0\365\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\365\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\365\0\u1045\0\u1076\0\u10a7\0\u10d8\0\365\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\365\0\365\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\365\0\u1355\0\365\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\365\0\u1570\0\u15a1\0\u15d2\0\365\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\365\0\365\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\365\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\365\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\365\0\365\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\365\0\u2212\0\u2243\0\u2274\0\61"+
    "\0\u22a5\0\365\0\u22d6\0\61\0\365\0\u2307\0\u2338\0\u2369"+
    "\0\61\0\u239a\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\3\1\2\1\11\1\12\1\13\1\6\1\14\1\15"+
    "\1\6\1\16\1\6\1\17\1\20\1\21\1\6\1\22"+
    "\1\6\1\23\1\24\3\6\1\25\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\63\0\1\3"+
    "\6\0\1\3\27\0\1\3\22\0\1\4\1\46\61\0"+
    "\1\47\1\6\4\0\26\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\26\6\1\0\1\6\25\0\1\50"+
    "\2\0\1\51\51\0\1\6\1\0\2\6\4\0\1\6"+
    "\1\52\2\6\1\53\15\6\1\54\3\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\2\6\1\55\13\6"+
    "\1\56\7\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\3\6\1\57\10\6\1\60\3\6\1\61\5\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\11\6"+
    "\1\62\14\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\4\6\1\63\21\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\10\6\1\64\4\6\1\65\10\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\3\6"+
    "\1\66\22\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\3\6\1\67\22\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\3\6\1\70\10\6\1\71\11\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\25\6"+
    "\1\72\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\4\6\1\73\21\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\11\6\1\74\14\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\7\6\1\75\16\6\1\0"+
    "\1\6\61\0\1\76\60\0\1\77\60\0\1\100\60\0"+
    "\1\101\64\0\1\102\61\0\1\103\13\0\1\104\56\0"+
    "\7\50\2\0\50\50\11\51\1\105\47\51\2\0\1\6"+
    "\1\0\2\6\4\0\2\6\1\106\23\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\4\6\1\107\4\6"+
    "\1\110\14\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\20\6\1\111\5\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\14\6\1\112\11\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\4\6\1\113\21\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\10\6"+
    "\1\114\15\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\10\6\1\115\1\116\14\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\14\6\1\117\11\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\1\120\25\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\1\6"+
    "\1\121\24\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\7\6\1\122\16\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\1\123\25\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\11\6\1\124\14\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\1\6\1\125"+
    "\5\6\1\126\16\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\1\6\1\127\24\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\25\6\1\130\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\1\6\1\131\24\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\3\6"+
    "\1\132\22\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\1\6\1\133\24\6\1\0\1\6\17\0\6\51"+
    "\1\134\2\51\1\105\47\51\2\0\1\6\1\0\2\6"+
    "\4\0\3\6\1\135\22\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\23\6\1\136\2\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\15\6\1\137\10\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\2\6"+
    "\1\140\23\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\4\6\1\141\21\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\10\6\1\142\15\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\23\6\1\143\2\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\4\6"+
    "\1\144\21\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\10\6\1\145\15\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\4\6\1\146\21\6\1\0\1\6"+
    "\21\0\1\6\1\0\1\147\1\6\4\0\26\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\1\6\1\150"+
    "\24\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\1\6\1\151\24\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\1\152\25\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\22\6\1\153\3\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\10\6\1\154\15\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\14\6"+
    "\1\155\11\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\20\6\1\156\5\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\2\6\1\157\23\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\6\6\1\160\17\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\16\6"+
    "\1\161\7\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\1\6\1\162\24\6\1\0\1\6\21\0\1\6"+
    "\1\0\1\163\1\6\4\0\26\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\7\6\1\164\16\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\20\6\1\165"+
    "\5\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\1\166\25\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\23\6\1\167\2\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\11\6\1\170\5\6\1\171\6\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\7\6"+
    "\1\172\16\6\1\0\1\6\21\0\1\6\1\0\1\173"+
    "\1\6\4\0\26\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\4\6\1\174\21\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\16\6\1\175\7\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\3\6\1\176"+
    "\22\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\10\6\1\177\15\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\3\6\1\200\22\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\4\6\1\201\21\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\4\6\1\202"+
    "\21\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\16\6\1\203\7\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\10\6\1\204\15\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\17\6\1\205\6\6\1\0"+
    "\1\6\21\0\1\6\1\0\1\206\1\6\4\0\1\207"+
    "\25\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\3\6\1\210\22\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\20\6\1\211\5\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\3\6\1\212\22\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\17\6\1\213"+
    "\6\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\11\6\1\214\14\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\4\6\1\215\21\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\6\6\1\216\17\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\2\6\1\217"+
    "\23\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\5\6\1\220\20\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\7\6\1\221\16\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\5\6\1\222\20\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\10\6\1\223"+
    "\15\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\1\224\25\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\21\6\1\225\4\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\11\6\1\226\14\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\20\6\1\227\5\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\26\6"+
    "\1\230\1\6\21\0\1\6\1\0\2\6\4\0\10\6"+
    "\1\231\15\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\3\6\1\232\22\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\1\233\25\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\6\6\1\234\1\235\16\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\1\236"+
    "\25\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\14\6\1\237\11\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\1\6\1\240\24\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\4\6\1\241\21\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\21\6\1\242"+
    "\4\6\1\0\1\6\53\0\1\243\1\244\25\0\1\6"+
    "\1\0\2\6\4\0\1\6\1\245\24\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\11\6\1\246\14\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\4\6"+
    "\1\247\21\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\1\6\1\250\24\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\17\6\1\251\6\6\1\0\1\6"+
    "\21\0\1\6\1\0\1\252\1\6\4\0\26\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\1\253\25\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\4\6"+
    "\1\254\21\6\1\0\1\6\51\0\1\255\44\0\1\256"+
    "\44\0\1\6\1\0\1\257\1\6\4\0\26\6\1\0"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\26\6\1\260"+
    "\1\6\21\0\1\6\1\0\2\6\4\0\1\261\25\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\20\6"+
    "\1\262\5\6\1\0\1\6\21\0\1\6\1\0\2\6"+
    "\4\0\24\6\1\263\1\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\10\6\1\264\15\6\1\0\1\6"+
    "\21\0\1\6\1\0\1\265\1\6\4\0\26\6\1\0"+
    "\1\6\51\0\1\266\55\0\1\267\33\0\1\6\1\0"+
    "\2\6\4\0\16\6\1\270\7\6\1\0\1\6\33\0"+
    "\1\271\22\0\1\272\23\0\1\6\1\0\2\6\4\0"+
    "\2\6\1\273\23\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\4\6\1\274\21\6\1\0\1\6\21\0"+
    "\1\6\1\0\1\275\1\6\4\0\26\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\22\6\1\276\3\6"+
    "\1\0\1\6\56\0\1\277\37\0\1\300\44\0\1\6"+
    "\1\0\2\6\4\0\7\6\1\301\16\6\1\0\1\6"+
    "\35\0\1\302\70\0\1\303\34\0\1\6\1\0\2\6"+
    "\4\0\6\6\1\304\17\6\1\0\1\6\21\0\1\6"+
    "\1\0\2\6\4\0\2\6\1\305\23\6\1\0\1\6"+
    "\21\0\1\6\1\0\2\6\4\0\17\6\1\306\6\6"+
    "\1\0\1\6\21\0\1\6\1\0\2\6\4\0\20\6"+
    "\1\307\5\6\1\0\1\6\35\0\1\310\76\0\1\311"+
    "\26\0\1\6\1\0\2\6\4\0\1\312\25\6\1\0"+
    "\1\6\60\0\1\313\41\0\1\314\40\0\1\6\1\0"+
    "\2\6\4\0\20\6\1\315\5\6\1\0\1\6\21\0"+
    "\1\6\1\0\2\6\4\0\14\6\1\316\11\6\1\0"+
    "\1\6\33\0\1\317\57\0\1\320\47\0\1\6\1\0"+
    "\2\6\4\0\1\6\1\321\24\6\1\0\1\6\34\0"+
    "\1\322\64\0\1\323\41\0\1\6\1\0\2\6\4\0"+
    "\21\6\1\324\4\6\1\0\1\6\21\0\1\6\1\0"+
    "\2\6\4\0\10\6\1\325\15\6\1\0\1\6\34\0"+
    "\1\326\64\0\1\327\41\0\1\6\1\0\2\6\4\0"+
    "\20\6\1\330\5\6\1\0\1\6\33\0\1\331\56\0"+
    "\1\332\50\0\1\6\1\0\2\6\4\0\4\6\1\333"+
    "\21\6\1\0\1\6\21\0\1\6\1\0\2\6\4\0"+
    "\1\6\1\334\24\6\1\0\1\6\32\0\1\335\77\0"+
    "\1\336\30\0\1\6\1\0\2\6\4\0\2\6\1\337"+
    "\23\6\1\0\1\6\54\0\1\340\53\0\1\341\32\0"+
    "\1\6\1\0\2\6\4\0\1\342\25\6\1\0\1\6"+
    "\40\0\1\343\61\0\1\344\40\0\1\6\1\0\2\6"+
    "\4\0\6\6\1\345\17\6\1\0\1\6\50\0\1\346"+
    "\61\0\1\347\44\0\1\350\64\0\1\351\60\0\1\352"+
    "\51\0\1\353\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9163];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\25\1\10\11\2\0\1\1"+
    "\1\0\24\1\6\11\1\1\1\0\26\1\1\11\73\1"+
    "\1\0\12\1\2\0\10\1\2\0\1\1\1\0\5\1"+
    "\2\0\1\1\2\0\4\1\2\0\1\1\2\0\4\1"+
    "\2\0\1\1\2\0\2\1\2\0\1\1\2\0\2\1"+
    "\2\0\1\1\2\0\2\1\2\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\11\1\1\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // Codigo Java
    ArrayList<ErrorLexico> erroresLexicos = new ArrayList<>();
    void addErrorLexico(int linea, int columna, String lexema){
        erroresLexicos.add(new ErrorLexico(linea, columna, lexema));
    }
    public ArrayList<ErrorLexico> getErroresLexicos(){
        return erroresLexicos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Terminal.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLexico(yyline, yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 2: 
            { 
            } 
            // fall through
          case 56: break;
          case 3: 
            { return new Symbol(Terminal.TK_enteros,          yyline, yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { return new Symbol(Terminal.TK_id,          yyline, yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { yychar = 1;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return new Symbol(Terminal.RW_C,          yyline, yychar, yytext());
            } 
            // fall through
          case 60: break;
          case 7: 
            { return new Symbol(Terminal.RW_D,          yyline, yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { return new Symbol(Terminal.TK_not,          yyline, yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { return new Symbol(Terminal.TK_mayor,          yyline, yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { return new Symbol(Terminal.TK_menor,          yyline, yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 11: 
            { return new Symbol(Terminal.TK_llaveA,          yyline, yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { return new Symbol(Terminal.TK_llaveC,          yyline, yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { return new Symbol(Terminal.TK_corcheteA,          yyline, yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { return new Symbol(Terminal.TK_corcheteC,          yyline, yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { return new Symbol(Terminal.TK_parA,          yyline, yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { return new Symbol(Terminal.TK_parC,          yyline, yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 17: 
            { return new Symbol(Terminal.TK_dosPuntos,          yyline, yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 18: 
            { return new Symbol(Terminal.TK_coma,          yyline, yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 19: 
            { return new Symbol(Terminal.RW_if,          yyline, yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { return new Symbol(Terminal.TK_igual,          yyline, yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 21: 
            { return new Symbol(Terminal.TK_diferente,          yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 22: 
            { return new Symbol(Terminal.TK_mayorIgual,          yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 23: 
            { return new Symbol(Terminal.TK_menorIgual,          yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { return new Symbol(Terminal.TK_or,          yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { return new Symbol(Terminal.TK_and,          yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { return new Symbol(Terminal.TK_decimales,          yyline, yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { return new Symbol(Terminal.RW_run,          yyline, yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 28: 
            { return new Symbol(Terminal.RW_seed,          yyline, yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { return new Symbol(Terminal.RW_true,          yyline, yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { return new Symbol(Terminal.RW_then,          yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { return new Symbol(Terminal.RW_else,          yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 32: 
            { return new Symbol(Terminal.RW_main,          yyline, yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 33: 
            { return new Symbol(Terminal.RW_with,          yyline, yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { return new Symbol(Terminal.RW_rules,          yyline, yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { return new Symbol(Terminal.RW_false,          yyline, yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { return new Symbol(Terminal.RW_match,          yyline, yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { return new Symbol(Terminal.RW_random,          yyline, yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { return new Symbol(Terminal.RW_rounds,          yyline, yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { return new Symbol(Terminal.RW_scoring,          yyline, yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { return new Symbol(Terminal.RW_initial,          yyline, yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { return new Symbol(Terminal.RW_players,          yyline, yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { return new Symbol(Terminal.RW_strategy,          yyline, yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { return new Symbol(Terminal.RW_get_move,          yyline, yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { return new Symbol(Terminal.RW_last_move,          yyline, yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { return new Symbol(Terminal.RW_strategies,          yyline, yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { return new Symbol(Terminal.RW_self_history,          yyline, yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { return new Symbol(Terminal.RW_round_number,          yyline, yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { return new Symbol(Terminal.RW_get_moves_count,          yyline, yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { return new Symbol(Terminal.RW_traidor,          yyline, yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { return new Symbol(Terminal.RW_get_last_n_moves,          yyline, yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { return new Symbol(Terminal.RW_defeccionnM,          yyline, yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { return new Symbol(Terminal.RW_opponent_history,          yyline, yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { return new Symbol(Terminal.RW_cooperacionM,          yyline, yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { return new Symbol(Terminal.RW_traicionado,          yyline, yychar, yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
